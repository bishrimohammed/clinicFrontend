import{c as t,a as e,e as n,b as u,g as o}from"./yup-e734d6e3.js";import{u as a}from"./useQuery-0c7d53ac.js";import{A as s}from"./axiosInstance-8e812653.js";import{u as l}from"./useMutation-46d3959e.js";import{Q as d}from"./index-adc5c439.js";const c=t().shape({firstName:e().required("firstName is required"),middleName:e().required("middleName is required"),lastName:e(),photo:n(),gender:e().required("Gender is required"),position:e().required("position is required"),date_of_birth:u().required("Date of birth is required"),date_of_hire:u().required("Date of hire is required"),address:t().shape({street:e(),region_id:e().required("region is required"),city_id:e().required("city is required"),subcity_id:e().required("sub city is required"),woreda_id:e().required("woreda is required"),house_number:e(),email:e().email("Invalid email"),phone_1:e().matches(/^(09|07)\d{8}$/,"Phone number is invalid").required("Phone number is required"),phone_2:e().nullable()}),Emergency:t().shape({firstName:e().required("firstName is required"),middleName:e().required("middleName is required"),lastName:e(),the_same_address_as_employee:o(),relation:e().required("relationship is required"),other_relation:e().when("relation",([r],i)=>r==="Other"?i.required("relation ship type is required"):i.nullable()),region_id:e().when("the_same_address_as_employee",([r],i)=>r?i.nullable():i.required("region is required")),city_id:e().when("the_same_address_as_employee",([r],i)=>r?i.nullable():i.required("city is required")),subcity_id:e().when("the_same_address_as_employee",([r],i)=>r?i.nullable():i.required("subcity is required")),woreda_id:e().when("the_same_address_as_employee",([r],i)=>r?i.nullable():i.required("woreda is required")),house_number:e(),phone_1:e().when("the_same_address_as_employee",([r],i)=>r?i.nullable():i.matches(/^(09|07)\d{8}$/,"Phone number is invalid").required("phone number is required")),phone_2:e().nullable()})}),p=()=>a({queryKey:["regions"],queryFn:async()=>s.get("/region").then(r=>r.data),staleTime:5*1e3*1e3}),b=()=>a({queryKey:["cities"],queryFn:async()=>s.get("/city").then(r=>r.data),staleTime:5*1e3*1e3}),f=()=>a({queryKey:["subCities"],queryFn:async()=>s.get("/subcity").then(r=>r.data),staleTime:5*60*1e3*1e3}),g=()=>l({mutationFn:async r=>s.post("/employee",r),onSuccess:async r=>{d.success("added")},onError:async r=>{d.error(r.response.data.message)}});export{c as E,b as a,f as b,g as c,p as u};
